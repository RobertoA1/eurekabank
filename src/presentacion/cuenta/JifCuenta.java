/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package presentacion.cuenta;

import entidades.Cliente;
import entidades.Cuenta;
import entidades.Movimiento;
import entidades.Usuario;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import validaciones.Clientes;
import validaciones.Cuentas;
import validaciones.Movimientos;

/**
 *
 * @author Usuario
 */
public class JifCuenta extends javax.swing.JInternalFrame {

    /**
     * Creates new form JifCuenta
     */
    public JifCuenta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeFiltrar = new javax.swing.JTree();
        lblDatos = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        cbxCuentas = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(20, 45, 65));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        treeFiltrar.setBackground(new java.awt.Color(204, 204, 204));
        treeFiltrar.setForeground(new java.awt.Color(0, 51, 51));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Operaciones");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Ingresos");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Apertura de cuenta");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Depósito");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Interes");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Transferencia");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Salidas");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Cancelar cuenta");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Retiro");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Mantenimiento");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ITF");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Transferencia.");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Cargo por movimiento");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeFiltrar.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeFiltrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeFiltrarMouseClicked(evt);
            }
        });
        treeFiltrar.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeFiltrarValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(treeFiltrar);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 220, 310));

        lblDatos.setFont(new java.awt.Font("Ebrima", 1, 24)); // NOI18N
        lblDatos.setForeground(new java.awt.Color(255, 204, 0));
        lblDatos.setText("DETALLES DE LA OPERACIÓN");
        jPanel1.add(lblDatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, 360, 30));

        tblDatos.setBackground(new java.awt.Color(255, 204, 51));
        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblDatos);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 140, 510, 270));

        cbxCuentas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CUENTA" }));
        jPanel1.add(cbxCuentas, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 100, -1));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CÓDIGO DE CUENTA:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, -1, -1));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("FILTRAR POR:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void treeFiltrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeFiltrarMouseClicked
        
    }//GEN-LAST:event_treeFiltrarMouseClicked

    private void treeFiltrarValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeFiltrarValueChanged
        if (evt.isAddedPath()) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) treeFiltrar.getLastSelectedPathComponent();
            if (selectedNode == null) {
                return;
            }
            String nodo = String.valueOf(selectedNode.getUserObject());
        
        if (nodo.equalsIgnoreCase("Apertura de cuenta")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("001");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Cancelar cuenta")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("002");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Depósito")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("003");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Retiro")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("004");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Interes")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("005");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Mantenimiento")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("006");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("ITF")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("007");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Transferencia")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("008");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Transferencia.")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("009");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (nodo.equalsIgnoreCase("Cargo por mantenimiento")) {
            try {
                listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
                llenarTabla("010");
            } catch (IllegalArgumentException | SQLException ex) {
                Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }
    }//GEN-LAST:event_treeFiltrarValueChanged

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        /*
        try {
            /*
            Usuario usuario = seguridad.Autenticacion.obtenerUsuario();
            Cliente cliente = Clientes.obtenerPorIdUsuario(usuario.getCodigo());
            listaC = Clientes.listarCuentas(cliente.getCodigo());
            llenarListaC();
            listaMov = Movimientos.obtenerMovPorNumCuenta(String.valueOf(cbxCuentas.getSelectedItem()));
            llenarTabla();
        } catch (IllegalStateException | SQLException ex) {
            Logger.getLogger(JifCuenta.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }//GEN-LAST:event_formInternalFrameOpened

    
    private void llenarTabla(String tipoMov) throws IllegalArgumentException, SQLException {
        modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(columnas);
        if(listaMov!=null){
            iterador = listaMov.iterator();
            while(iterador.hasNext()) {
            movimiento = iterador.next();
            fila[0] = movimiento.getMovinumero();
            fila[1] = movimiento.getFecha();
            fila[2] = movimiento.getEmplcodigo();
            if(tipoMov.equalsIgnoreCase("002") || tipoMov.equalsIgnoreCase("004") ||  tipoMov.equalsIgnoreCase("006") || tipoMov.equalsIgnoreCase("007"))
                fila[3] = "-" + movimiento.getImporte();
            else   
                fila[3] = movimiento.getImporte();
            fila[4] = movimiento.getCuenReferencia();
                if(tipoMov.equalsIgnoreCase(movimiento.getTipoCodigo())){
                    modelo.addRow(fila);
                    confirmador++;
                }
            }
            if(confirmador!=0){
                tblDatos.setModel(modelo);
                confirmador=0;
            }
        } else {
            fila[0] = "---";
            fila[1] = "---";
            fila[2] = "---";
            fila[3] = "---";
            fila[4] = "---";
            modelo.addRow(fila);
            tblDatos.setModel(modelo);
        }
    }
    
    private void llenarTabla(){
        String columnas1[] = {"N° OP", "Fecha","Encargado","Operacion","Importe","Destinatario"};
        Object fila1[] = new Object[columnas1.length];
        modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(columnas1);
        if(listaMov!=null){
        iterador = listaMov.iterator();
        while(iterador.hasNext()) {
            movimiento = iterador.next();
            fila1[0] = movimiento.getMovinumero();
            fila1[1] = movimiento.getFecha();
            fila1[2] = movimiento.getEmplcodigo();
            fila1[3] = retornarDescripcion(movimiento.getTipoCodigo());
            fila1[4] = movimiento.getImporte();
            fila1[5] = movimiento.getCuenReferencia();
            modelo.addRow(fila1);
        }
        tblDatos.setModel(modelo);
        } else {
            fila1[0] = "---";
            fila1[1] = "---";
            fila1[2] = "---";
            fila1[3] = "---";
            fila1[4] = "---";
            fila1[5] = "---";
            modelo.addRow(fila1);
            tblDatos.setModel(modelo);
        }
            
    }
    
    private String retornarDescripcion(String tipoMov){
        String descripcion=" ";
        switch(tipoMov){
            case "001":
                descripcion= "Apertura de cuenta"; break;
            case "002":
                descripcion= "Cancelar cuenta"; break;
            case "003":
                descripcion= "Deposito"; break;
            case "004":
                descripcion= "Retiro"; break;
            case "005":
                descripcion= "Interes"; break;
            case "006":
                descripcion= "Mantenimiento"; break;
            case "007":
                descripcion= "ITF"; break;
            case "008":
                descripcion= "Transferencia"; break;
            case "009":
                descripcion= "Transferencia/Salida"; break;
            case "010":
                descripcion= "Cargo"; break;
        }
        return descripcion;
    }
    
    private void llenarListaC(){
        modeloC = new DefaultComboBoxModel();
        if(listaC!=null){
            iteradorC = listaC.iterator();
            while(iteradorC.hasNext()) {
                c = iteradorC.next();
                modeloC.addElement(c.getCodigo());
            }
            cbxCuentas.setModel(modeloC);
        } else {
            cbxCuentas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CUENTA" }));
        }
        
    }
    
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbxCuentas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDatos;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTree treeFiltrar;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelo;
    DefaultComboBoxModel<String> modeloC;
    private static ArrayList<Movimiento> listaMov;
    private Movimiento movimiento;
    private ArrayList<Cuenta> listaC;
    private Iterator<Cuenta> iteradorC;
    private Cuenta c;
    private String columnas[] = {"N° OP", "Fecha","Encargado","Importe","Destinatario"};
    private Object fila[] = new Object[columnas.length];
    private Iterator<Movimiento> iterador;
    private int confirmador = 0;
}
